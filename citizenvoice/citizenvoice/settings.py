"""
Django settings for citizenvoice project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta
from rest_framework.settings import api_settings


if os.name == 'nt':
    import platform
    OSGEO4W = r"C:\OSGeo4W"
    # if '64' in platform.architecture()[0]:
    #     OSGEO4W += "64"
    assert os.path.isdir(OSGEO4W), "Directory does not exist: " + OSGEO4W
    os.environ['OSGEO4W_ROOT'] = OSGEO4W
    os.environ['GDAL_DATA'] = OSGEO4W + r"\share\gdal"
    os.environ['PROJ_LIB'] = OSGEO4W + r"\share\proj"
    os.environ['PATH'] = OSGEO4W + r"\bin;" + os.environ['PATH']

# Default settings survey
DEFAULT_SURVEY_PUBLISHING_DURATION = 7

# read environment variable form .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Choice of database engine will be retrieved from .env file
DATABASE_ENGINE = os.getenv('DATABASE_ENGINE')

ALLOWED_HOSTS = []

# Application definition

# note: add your custom apps after django apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django.contrib.sites',
    'apiapp',
    'rest_framework',
    'users.apps.UsersConfig',
    'survey_design.apps.SurveyDesignConfig',
    'respondent.apps.RespondentConfig',
    'corsheaders',
    'knox',
    'knox_allauth',
    'allauth',
    'allauth.account'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # CORS
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'citizenvoice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'citizenvoice.wsgi.application'

# Configure CORS allowed ports
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://145.94.193.168:3000'
]
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1'
]
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    'http://localhost:3000',
     'http://127.0.0.1:3000',
    'http://145.94.193.168:3000'
)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://145.94.193.168:3000",
]

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# The code below is necessary to distinguish a deployment for CI with
# GitHub Actions (IF part) and any other deployment  (the ELSE part)
if os.getenv('GITHUB_WORKFLOW'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': 'github_actions',
            'USER': 'postgres',
            'PASSWORD': 'postgres',
            'HOST': 'localhost',
            'PORT': '5432'
        }
    }
else:
    if DATABASE_ENGINE == "postgis":
        DATABASES = {
            'default': {
                'ENGINE': 'django.contrib.gis.db.backends.postgis',
                'NAME': os.getenv('POSTGRES_DBASE'),
                'USER': os.getenv('POSTGRES_USER'),
                'PASSWORD': os.getenv('POSTGRES_PWD'),
                'HOST': os.getenv('POSTGRES_HOST'),
                'PORT': os.getenv('POSTGRES_PORT'),
                'TEST': {
                    'NAME': os.getenv('TEST_DBASE'),
                },
            }
        }
    elif DATABASE_ENGINE == "spatialite":
        DATABASES = {
            'default': {
                'ENGINE': "django.contrib.gis.db.backends.spatialite",
                'NAME': BASE_DIR / "db.sqlite3"
            }
        }
    else:
        print("No settings is available for selected database engine!")

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = 'var/static_root/'
STATICFILES_DIRS = ['static_vue']
# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if os.name == 'nt':
    GDAL_LIBRARY_PATH = r'C:\OSGeo4W\bin\gdal306.dll'

LOGIN_REDIRECT_URL = 'survey-home'
LOGIN_URL = 'survey-design-index'

# Knox & AllAuth Authentication

# django-allauth settings
# In order to make allauth suitable for API user our patched account adapter
ACCOUNT_ADAPTER = "knox_allauth.adapters.AccountAdapter"
# SOCIALACCOUNT_ADAPTER = "apps.users.adapters.SocialAccountAdapter"
# ACCOUNT_ALLOW_REGISTRATION = os.environ['DJANGO_ACCOUNT_ALLOW_REGISTRATION'] = True # fIXME
ACCOUNT_ALLOW_REGISTRATION = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USER_MODEL_EMAIL_FIELD = "email"
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"  # TODO: set to "mandatory"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USERNAME_MIN_LENGTH = 2

SITE_ID = 1

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication', ),
}

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# django-rest-knox
#
REST_KNOX = {
    "AUTH_HEADER_PREFIX": "Token",
    "TOKEN_TTL": timedelta(hours=24),
    "SECURE_HASH_ALGORITHM": "cryptography.hazmat.primitives.hashes.SHA512",
    "AUTH_TOKEN_CHARACTER_LENGTH": 64,
    "TOKEN_LIMIT_PER_USER": None,
    "AUTO_REFRESH": False,
}

# drf-spectacular
#
SPECTACULAR_SETTINGS = {
    "TITLE": "Address API",
    "DESCRIPTION": "Documentation of API endpoints of Address",
    "VERSION": "1.0.0",
    "SCHEMA_PATH_PREFIX": "/api",
}
